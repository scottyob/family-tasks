// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  groups        UsersOnGroups[]
  gold          Int             @default(0)
  Task          Task[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// More app stuff

model UsersOnGroups {
  user    User   @relation(fields: [userId], references: [id])
  group   Group  @relation(fields: [groupId], references: [id])
  userId  String
  groupId String

  @@id([userId, groupId])
}

model Group {
  id    String          @id @default(uuid())
  name  String
  users UsersOnGroups[]
  Task  Task[]
}

model Task {
  id       String  @id @default(uuid())
  title    String
  notes    String?
  type     String  @default("Task") // Expected {Habbit, Daily, Task}
  complete Boolean @default(false)

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  assignedTo   User?   @relation(fields: [assignedToId], references: [id])
  assignedToId String?

  dueDate DateTime?
}
